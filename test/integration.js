var clc = require('cli-color');
var debugClient = require('debug')('lp-client');
var debugQueue = require('debug')('pp-queue');
var debugWorker = require('debug')('pp-worker');
var LPClient = require('zeromq-lpclient');
var PPQueue = require('../index');
var PPWorker = require('zeromq-ppworker');

// sequential counter for messages generated by ppworker
var seq = 0;
var requestedCount = 0;
var clientReceived = [];
var workerReceived = [];
var workerSent = [];
var queueBackendSent = [];
var queueFrontendSent = [];
var maxMessages = 100;
var clientWaitTime = 10;
var giveupTimeout = 5000;
var giveupTimer = -1;
var clientCount = 1; // XXX TODO
var workerCount = 1; // XXX TODO

function resetGiveupTimer() {
  if (giveupTimer !== -1) {
    clearTimeout(giveupTimer);
  }
  giveupTimer = setTimeout(function giveup() {
    console.log('Giving up waiting after ' + Math.floor(giveupTimeout / 1000) + 's');
    printResults();
    process.exit(1);
  }, giveupTimeout);
}

function getMissingFromSeq(arr, count) {
  var missing = [];
  var lookingFor = 0;
  var i = 0;
  while (i < count && i < arr.length) {
    if (parseInt(arr[i]) !== lookingFor) {
      missing.push(lookingFor);
    }
    else {
      ++i;
    }
    ++lookingFor;
  }
  return missing;
}

var error = clc.red.bold;
var good = clc.green.bold;
function printResults() {
  var allReqsSent = requestedCount == maxMessages;
  var clientReqsMatch = requestedCount == clientReceived.length;
  console.log('Client request count:', allReqsSent ? good(requestedCount) : error(requestedCount));
  console.log('Client received count:', clientReqsMatch ? good(clientReceived.length) : error(clientReceived.length));

  var success = clientReqsMatch;
  if (!clientReqsMatch) {
    success = false;
    console.log(error('Client messages not received: ' + getMissingFromSeq(clientReceived, maxMessages).toString()));
  }
  else {
    console.log(good('Client received back all requested messages'));
  }
  if (allReqsSent && workerReceived.length !== maxMessages) {
    success = false;
    console.log(error('Worker didn\'t receive: ' + getMissingFromSeq(workerReceived, maxMessages).toString()));
  }
  else {
    console.log(good('Worker received all messages sent from the client'));
  }
  if (allReqsSent && workerSent.length !== maxMessages) {
    success = false;
    console.log(error('Worker didn\'t send: ' + getMissingFromSeq(workerSent, maxMessages).toString()));
  }
  else {
    console.log(good('Worker sent all messages to the queue'));
  }
  if (allReqsSent && queueBackendSent.length !== maxMessages) {
    success = false;
    console.log(error('Queue didn\'t send to worker: ' + getMissingFromSeq(queueBackendSent, maxMessages).toString()));
  }
  else {
    console.log(good('Queue sent all messages to the worker'));
  }
  if (allReqsSent && queueFrontendSent.length !== maxMessages) {
    success = false;
    console.log(error('Queue didn\'t send to client: ' + getMissingFromSeq(queueFrontendSent, maxMessages).toString()));
  }
  else {
    console.log(good('Queue sent all messages to the client'));
  }
  process.exit(success ? 0 : 1);
}

function ppWorkerFn(cb) {
  // generate message with sequence number
  cb('' + seq);
  ++seq;
  workerReceived.push(seq);
  debugWorker('Produced ' + seq);
}

var ppq = new PPQueue({backendUrl: 'tcp://127.0.0.1:9001', frontendUrl: 'tcp://127.0.0.1:9000'})
  .on('frontend', function (message) {
    var seq = message.toString('utf8');
    queueFrontendSent.push(seq);
    debugQueue('Sent work \'' + seq + ' to client');
  })
  .on('backend', function (message) {
    var seq = message.toString('utf8');
    queueBackendSent.push(seq);
    debugQueue('Sent request \'' + seq + ' to worker');
  });

var ppw = new PPWorker({url: 'tcp://127.0.0.1:9001'}, ppWorkerFn)
  .on('work', function (message) {
    var seq = message.toString('utf8');
    workerSent.push(seq);
    debugWorker('Sent ' + seq);
  });

var lpc = new LPClient({url: 'tcp://127.0.0.1:9000', timeout: 2500});
lpc.on('message', function (message) {
  var seq = message.toString('utf8');
  clientReceived.push(seq);
  debugClient('Received sequence #' + seq);

  if (clientReceived.length == maxMessages) {
    clearTimeout(giveupTimer);
    printResults();
  }

  if (requestedCount < maxMessages) {
    setTimeout(function () {
      lpc.ready();
      debugClient('Requested sequence #' + requestedCount);
      ++requestedCount;
      resetGiveupTimer();
    }, 100);
  }
});
lpc.ready();
debugClient('Requested sequence #' + requestedCount);
++requestedCount;
